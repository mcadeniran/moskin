// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  username  String    @unique
  fname     String    @default("")
  lname     String    @default("")
  image     String    @default("")
  phone     String    @default("")
  addresses Address[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isAdmin   Boolean   @default(false)
  reviews   Review[]
}

model Address {
  id        String   @id @default(uuid())
  title     String
  house     String
  street    String
  city      String
  state     String
  country   String
  postal    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userEmail], references: [email])
  userEmail String

  @@unique([userEmail, title])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  // slug      String    @unique

  @@index([createdAt])
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Int
  images      String[]
  onSale      Boolean  @default(false)
  off         Int?
  features    String
  ingredients String
  display     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  isFeatured  Boolean  @default(false)
  Reviews     Review[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  details   String
  rating    Float
  edited    Boolean  @default(false)
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  REJECTED
  CANCELLED
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  items           Json[]
  shippingAddress Json
  paymentMethod   String
  itemsPrice      Int
  shippingPrice   Int
  totalPrice      Int
  isPaid          Boolean
  paidAt          DateTime?
  deliveredAt     DateTime?
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paymentId       String?     @unique
  User            User        @relation(fields: [userId], references: [id])
  reason          String?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
